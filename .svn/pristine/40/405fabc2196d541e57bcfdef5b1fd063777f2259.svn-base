package controllers;

import java.util.Date;
import java.util.List;

import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.ObjectNode;

import models.customer.CustomerHistory;
import models.customer.CustomerServiceTask;
import models.punchcard.Card;
import models.usermanagement.MenuPermission;
import models.usermanagement.Role;
import play.mvc.BodyParser;
import play.mvc.Controller;
import play.mvc.Result;
import services.Constants;
import services.JavaUtils;
import services.deadbolt.DeadboltHandler;
import be.objectify.deadbolt.java.actions.Dynamic;

public class Test extends Controller {
  
    public static Result roleMenu() {
        /*MenuPermission mp = MenuPermission.findByRoleIdAndPermissionName(11, "SecondPermission");
        if(mp!=null)
        	System.out.println(mp.id);
        else
        	System.out.println("Permission not found");*/
    	
    	for(MenuPermission mp : Role.get(1).getPermissions()) {
    		System.out.println(mp.permissionName);
    	}
        
        return TODO;
    }
    
    
    public static Result login(String username) {
    	session(Constants.SESN_USERNAME, username);
    	return ok("You have been logged in");
    }
    
    
    public static Result logout() {
    	session().clear();
    	return ok("You have been logged out");
    }
  
    
    @Dynamic(value = "Test"+Constants.NAME_SEPERATOR+"permission", handler = DeadboltHandler.class)
    public static Result permission() {
    	return ok("Entry restricted");
    }
    
    public static Result punchIn() {
    	List<Card> cards = Card.getAvailableCards();
    	int len = cards.size();
    	if(len == 0)
    		return ok("No card is available for new customer");
    	
    	int rand = (len==1) ? 0 : (int) Math.floor(Math.random() * len);
    	Card c = cards.get(rand);
    	CustomerHistory ch = new CustomerHistory();
		ch.card = c;
		ch.cardNumber = c.cardNumber;
		ch.punchInTime = new Date();
		CustomerHistory.create(ch);
		
    	return ok("Card [" + c.cardNumber+"] has been punced in");
    	//return TODO;
    }
    

    //@BodyParser.Of(BodyParser.Json.class)
    public static Result jsonArray() {
    	ArrayNode cstArray = CustomerServiceTask.allToJson();
    
    	if(cstArray.size() == 0)
    		return ok(JavaUtils.generateJsonFailureResponse());
    	else
    		return ok(JavaUtils.generateJsonSuccessResponse(cstArray));
    	//return ok(CustomerServiceTask.find.all().toString());
    	}
}
